/*
 * This file is part of SQL Workbench/J, https://www.sql-workbench.eu
 *
 * Copyright 2002-2022, Thomas Kellerer
 *
 * Licensed under a modified Apache License, Version 2.0
 * that restricts the use for certain governments.
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at.
 *
 *     https://www.sql-workbench.eu/manual/license.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * To contact the author please send an email to: support@sql-workbench.eu
 *
 */
package workbench.db.h2database;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import workbench.log.CallerInfo;
import workbench.log.LogMgr;

import workbench.db.ColumnDefinitionEnhancer;
import workbench.db.ColumnIdentifier;
import workbench.db.JdbcUtils;
import workbench.db.TableDefinition;
import workbench.db.WbConnection;

import workbench.util.StringUtil;

/**
 *
 * @author Thomas Kellerer
 */
public class H2ColumnEnhancer
  implements ColumnDefinitionEnhancer
{

  @Override
  public void updateColumnDefinition(TableDefinition table, WbConnection conn)
  {
    updateComputedColumns(table, conn);
  }

  private void updateComputedColumns(TableDefinition table, WbConnection conn)
  {
    PreparedStatement stmt = null;
    ResultSet rs = null;

    String tablename = table.getTable().getTableName();
    String schema = table.getTable().getSchema();
    boolean is20 = JdbcUtils.hasMinimumServerVersion(conn, "2.0");

    String sql;
    if (is20)
    {
      sql =
        "select column_name, generation_expression, is_identity, identity_generation \n" +
        "from information_schema.columns \n" +
        "where table_name = ? \n" +
        "and table_schema = ? \n" +
        "and (is_generated <> 'NEVER' or is_identity = 'YES') \n";
    }
    else
    {
      sql =
        "select column_name, null as generation_expression \n" +
        "from information_schema.columns \n" +
        "where table_name = ? \n" +
        "and table_schema = ? \n" +
        "and is_computed = true \n";
    }

    LogMgr.logMetadataSql(new CallerInfo(){}, "computed columns", sql, tablename, schema);
    try
    {
      stmt = conn.getSqlConnection().prepareStatement(sql);
      stmt.setString(1, tablename);
      stmt.setString(2, schema);
      rs = stmt.executeQuery();
      while (rs.next())
      {
        String colname = rs.getString(1);
        String expression = rs.getString(2);
        ColumnIdentifier col = ColumnIdentifier.findColumnInList(table.getColumns(), colname);
        if (col == null) continue;

        // Before h2 2.0 the driver returned the expression as a the default value
        String expr = col.getDefaultValue();
        if (StringUtil.isNonBlank(expr))
        {
          if (!expr.startsWith("AS"))
          {
            expr = "AS " + expr;
          }
          col.setDefaultValue(null);
          col.setComputedColumnExpression(expr);
        }
        // Starting with 2.0 this needs to be taken from information_schema.columns
        else if (StringUtil.isNonBlank(expression))
        {
          if (!expression.startsWith("AS"))
          {
            expression = "AS " + expression;
          }
          col.setDefaultValue(null);
          col.setComputedColumnExpression(expression);
        }
        if (is20)
        {
          String identity = rs.getString(3);
          String identityType = rs.getString(4);
          if ("YES".equals(identity))
          {
            col.setIsIdentity(true);
            col.setIsAutoincrement(true);
            col.setIsGenerated(true);
            if ("BY DEFAULT".equals(identityType))
            {
              col.setGeneratorExpression("GENERATED BY DEFAULT AS IDENTITY");
            }
            else if ("ALWAYS".equals(identityType))
            {
              col.setGeneratorExpression("GENERATED ALWAYS AS IDENTITY");
            }
          }
        }
      }
    }
    catch (Exception e)
    {
      LogMgr.logMetadataError(new CallerInfo(){}, e, "computed columns", sql, tablename, schema);
    }
    finally
    {
      JdbcUtils.closeAll(rs, stmt);
    }
  }

}
